<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace = "com.pj.erp.persistence.FT_DAO">
	<!-- 날짜 검색 분개 가져오기 -->
	<select id="FT_DateChitCnt" parameterType="java.util.Map" resultType="int">
		select count(journal_number) 
		from journal_record_tbl
		where to_char(journal_date, 'yyyy-MM-dd') = #{year} || '-' || #{month} || '-' || #{day}
	</select>
	
	<!-- 거래번호 최고값 -->
	<select id="FT_ChitMaxNumber" parameterType="java.util.Map" resultType="int">
		select journal_number 
		from journal_record_tbl
		where to_char(journal_date, 'yyyy-MM-dd') = #{year} || '-' || #{month} || '-' || #{day}
		and rownum = 1
		order by 1 asc
	</select>
	
	<!-- 분개 데이터 갯수 가져오기 -->
	<select id="FT_chitDataCnt" parameterType="java.util.Map" resultType="int">
		select count(journal_code) 
		from journal_record_tbl
		where to_char(journal_date, 'yyyy-MM-dd') = #{year} || '-' || #{month} || '-' || #{day}
		and journal_number = #{chkno}
	</select>
	
	<!-- 분개 데이터 가져오기 -->
	<select id="FT_chitDataLoad" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_Chit">
		select j.journal_code, j.journal_number, j.journal_date, de.detail_ac_code, de.account_name,
		c.customer_code, c.customer_name, j.debtor_value, j.creditor_value, j.l_count_value, j.r_count_value, j.journal_abstract,
		j.jr_state, j.last_update, j.last_modi_user, writer.e_name wname, j.username
		from journal_record_tbl j, detail_ac_tbl de, customer_list_tbl c, users writer
		where j.detail_ac_code = de.detail_ac_code
		and j.customer_code = c.customer_code
		and writer.username = j.last_modi_user
		and to_char(j.journal_date, 'yyyy-MM-dd') = #{year} || '-' || #{month} || '-' || #{day}
		and j.journal_number = #{chkno}
	</select>
	
	<!-- 분개 key 가져오기 -->
	<select id="FT_chitKeySelect" resultType="String">
		select JOURNAL_CODE from journal_record_tbl
		where ROWNUM = 1
		ORDER BY JOURNAL_CODE desc
	</select>
	
	<!-- 전표입력 -->
	<insert id="FT_chitInsert" parameterType = "java.util.Map">
		insert into journal_record_tbl(JOURNAL_CODE, JOURNAL_NUMBER, JOURNAL_DATE,
		DETAIL_AC_CODE, CUSTOMER_CODE, DEBTOR_VALUE, CREDITOR_VALUE, L_COUNT_VALUE, R_COUNT_VALUE,
		JOURNAL_ABSTRACT, JR_STATE, LAST_UPDATE, LAST_MODI_USER, USERNAME)
		values(journal_seq.nextval, #{number}, TO_DATE(#{date}), #{subjectcode}, #{accountcode},
		#{leftprice}, #{rightprice}, #{leftcount}, #{rightcount}, #{text}, #{type},
		#{updateday}, #{wname}, #{fname}) 
	</insert>
	
	<!-- 전표수정 -->
	<update id="FT_chitupdate" parameterType = "java.util.Map">
		update journal_record_tbl
		set JOURNAL_NUMBER = #{number}, JOURNAL_DATE = #{date}, DETAIL_AC_CODE = #{subjectcode},
		CUSTOMER_CODE = #{accountcode}, DEBTOR_VALUE = #{leftprice}, CREDITOR_VALUE = #{rightprice},
		L_COUNT_VALUE = #{leftcount}, R_COUNT_VALUE = #{rightcount}, JOURNAL_ABSTRACT = #{text},
		JR_STATE = #{type}, LAST_UPDATE = #{updateday}, LAST_MODI_USER = #{wname}
		<if test="fname != null">
			, USERNAME = #{fname}
		</if>
		where JOURNAL_CODE = #{key}
	</update>
	
	<!-- 전표삭제 -->
	<delete id="FT_chitDelete" parameterType = "java.util.Map">
		delete from journal_record_tbl
		where JOURNAL_CODE = #{key}
	</delete>

	<!-- 사업자 번호 추가 -->
	<insert id="FT_LicenseInsert" parameterType = "com.pj.erp.vo.FT.FT_Account">
		insert into b_license_tbl(license_number, bs_name, bs_master, bs_startdate,
		bs_number, bs_address, bs_address2, bs_condition, bs_line, license_scanfile)
		values(#{license_number}, #{bs_name}, #{bs_master}, #{bs_startdate},
		#{bs_number}, #{bs_address}, #{bs_address2}, #{bs_condition}, #{bs_line}, #{license_scanfile})
	</insert>
	
	<!-- 거래처 추가 -->
	<insert id="FT_AccountInsert" parameterType = "com.pj.erp.vo.FT.FT_Account">
		insert into customer_list_tbl(customer_code, license_number, customer_name, branch_name,
		customer_credit, deal_state)
		values('CUS_' || customer_seq.nextval, #{license_number}, #{customer_name}, #{branch_name},
		#{customer_credit}, #{deal_state})
	</insert>
	
	<!-- 사업자 번호 수정 -->
	<update id="FT_LicenseUpdate" parameterType = "java.util.Map">
		update b_license_tbl
		set bs_name = #{bsName}, bs_master = #{bsMaster}, bs_startdate = #{bsStartdate},
		bs_number = #{bsNumber}, bs_address = #{bsAddress}, bs_address2 = #{bsAddress2}, bs_condition = #{bsCondition},
		bs_line = #{bsLine}, license_scanfile = #{scanfile}
		where license_number = #{licenseNumber}
	</update>
	
	<!-- 거래처 수정 -->
	<update id="FT_AccountUpdate" parameterType = "java.util.Map">
		update customer_list_tbl
		set customer_name = #{customerName}, branch_name = #{branchName},
		customer_credit = #{customerCredit}, deal_state = #{state}
		where customer_code = #{customerCode}
	</update>
	
	<!-- 사업자 번호 삭제 -->
	<delete id="FT_LicenseDelete" parameterType = "java.util.Map">
		delete from b_license_tbl
		where license_number = #{licenseNumber}
	</delete>
	
	<!-- 거래처 삭제 -->
	<delete id="FT_AccountDelete" parameterType = "java.util.Map">
		delete from customer_list_tbl
		where customer_code = #{customerCode}
	</delete>
	
	<!-- 건물 추가 -->
	<insert id="FT_BuildingInsert" parameterType = "com.pj.erp.vo.FT.FT_Building">
		insert into building_tbl(_code, department_code, building_name, building_address,
		building_regdate, building_cost)
		values('BD_' || Building_seq.nextval, #{license_number}, #{buildingName}, #{Address},
		#{buyDate}, #{buyPrice})
	</insert>
	
	<!-- 건물 수정 -->
	<update id="FT_BuildingUpdate" parameterType = "java.util.Map">
		update customer_list_tbl
		set customer_name = #{customerName}, branch_name = #{branchName},
		customer_credit = #{customerCredit}, deal_state = #{state}
		where customer_code = #{customerCode}
	</update>
	
	<!-- 건물 삭제 -->
	<delete id="FT_BuildingDelete" parameterType = "java.util.Map">
		delete from customer_list_tbl
		where customer_code = #{customerCode}
	</delete>
	
	<!-- 건물 가져오기 -->
	<select id="FT_BuildingAllSelect" resultType="com.pj.erp.vo.FT.FT_Building">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
	</select>
	
	<!-- 건물 개수 가져오기 -->
	<select id="FT_BuildingCntSelect" parameterType="String" resultType="int">
		SELECT
	    count(c.customer_code)
	    FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
		and (c.customer_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.customer_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.license_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 건물 한개 가져오기 -->
	<select id="FT_BuildingOneSelect" parameterType="String" resultType="com.pj.erp.vo.FT.FT_Building">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
		and c.customer_code = #{srhval, jdbcType=VARCHAR}
	</select>
	
	<!-- 건물 가져오기 -->
	<select id="FT_BuildingSelect" parameterType="String" resultType="com.pj.erp.vo.FT.FT_Building">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
		and (c.customer_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.customer_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.license_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 적금 가져오기 -->
	<select id="FT_SavingsSelect" resultType="com.pj.erp.vo.FT.FT_Savings">
		SELECT
		s.SA_CODE as savingsCode, d.ACCOUNT_NAME as savingsName, 
		c.customer_code as accCode, c.customer_name as accName, a.ACCOUNTS_CODE as subjectCode,
		a.ACCOUNTS_NAME as subjectName, s.sa_number as accountNo, s.sa_holder as accountHolder, s.sa_amount as devPrice
		FROM detail_ac_tbl d, SAVING_ACCOUNT_TBL s, customer_list_tbl c, accounts_tbl a
		where d.DETAIL_AC_CODE = s.sa_code
		and d.ACCOUNTS_CODE = a.ACCOUNTS_CODE
		and s.customer_code = c.customer_code
		order by s.SA_CODE asc
	</select>
	
	<!-- 적금 key 가져오기 -->
	<select id="FT_SavingsKeySelect" resultType="String">
		select sa_code from SAVING_ACCOUNT_TBL
		where ROWNUM = 1
		ORDER BY sa_code desc
	</select>
	
	<!-- 적금 추가 -->
	<insert id="FT_SavingsPrevInsert" parameterType = "java.util.Map">
		insert into detail_ac_tbl(ACCOUNTS_CODE, DETAIL_AC_CODE, ACCOUNT_NAME)
		values (#{SubjectCode}, 'SA_' || savings_seq.nextval, #{savingsName})
	</insert>
	
	<insert id="FT_SavingsInsert" parameterType = "java.util.Map">
		insert into SAVING_ACCOUNT_TBL(SA_CODE, CUSTOMER_CODE, SA_NUMBER, SA_HOLDER, SA_AMOUNT)
		values ('SA_' || savings_seq.currval, #{AccCode}, #{AccountNo}, #{AccountHolder}, #{DevPrice})
	</insert>
	
	<!-- 적금수정 -->
	<update id="FT_SavingsPrevUpdate" parameterType = "java.util.Map">
		update detail_ac_tbl
		set ACCOUNTS_CODE = #{SubjectCode}, ACCOUNT_NAME = #{savingsName}
		where DETAIL_AC_CODE = #{savingsCode}
	</update>
	
	<update id="FT_SavingsUpdate" parameterType = "java.util.Map">
		update SAVING_ACCOUNT_TBL
		set CUSTOMER_CODE = #{AccCode}, SA_NUMBER = #{AccountNo}, SA_HOLDER = #{AccountHolder}, SA_AMOUNT = #{DevPrice}
		where SA_CODE = #{savingsCode}
	</update>
	
	<!-- 적금삭제 -->
	<delete id="FT_SavingsPrevDelete" parameterType = "java.util.Map">
		delete from detail_ac_tbl
		where DETAIL_AC_CODE = #{key}
	</delete>
	
	<delete id="FT_SavingsDelete" parameterType = "java.util.Map">
		delete from SAVING_ACCOUNT_TBL
		where SA_CODE = #{key}
	</delete>
	
	<!-- 예금 가져오기 -->
	<select id="FT_DepositAllSelect" resultType="com.pj.erp.vo.FT.FT_Deposit">
		SELECT
		b.BA_CODE as depositCode, a.account_name as depositName, 
		c.customer_code as accCode, c.customer_name as accName, a.ACCOUNTS_CODE as subjectCode,
		ac.ACCOUNTS_NAME as subjectName, b.ba_number as accountNo, b.ba_holder as accountHolder
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.ba_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and b.customer_code = c.customer_code
		order by b.BA_CODE asc
	</select>
	
	<!-- 예금 개수 가져오기 -->
	<select id="FT_DepositCntSelect" parameterType="String" resultType="int">
		select count(b.BA_CODE)
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.ba_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and b.customer_code = c.customer_code
		and (b.BA_CODE like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or a.account_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or b.ba_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 예금 검색한 것 가져오기 -->
	<select id="FT_DepositSelect" parameterType="String" resultType="com.pj.erp.vo.FT.FT_Deposit">
		SELECT
		b.BA_CODE as depositCode, a.account_name as depositName, 
		c.customer_code as accCode, c.customer_name as accName, a.ACCOUNTS_CODE as subjectCode,
		ac.ACCOUNTS_NAME as subjectName, b.ba_number as accountNo, b.ba_holder as accountHolder
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.ba_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and b.customer_code = c.customer_code
		and (b.BA_CODE like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or a.account_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or b.ba_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 예금 key 가져오기 -->
	<select id="FT_DepositKeySelect" resultType="String">
		select ba_code from bank_account_tbl
		where ROWNUM = 1
		ORDER BY ba_code desc
	</select>
	
	<!-- 예금 추가 -->
	<insert id="FT_DepositPrevInsert" parameterType = "java.util.Map">
		insert into detail_ac_tbl(ACCOUNTS_CODE, DETAIL_AC_CODE, ACCOUNT_NAME)
		values (#{SubjectCode}, 'DE_' || accounts_seq.nextval, #{depositName})
	</insert>
	
	<insert id="FT_DepositInsert" parameterType = "java.util.Map">
		insert into bank_account_tbl(BA_CODE, CUSTOMER_CODE, BA_NUMBER, BA_HOLDER)
		values ('DE_' || accounts_seq.currval, #{AccCode}, #{AccountNo}, #{AccountHolder})
	</insert>
	
	<!-- 예금수정 -->
	<update id="FT_DepositPrevUpdate" parameterType = "java.util.Map">
		update detail_ac_tbl
		set ACCOUNTS_CODE = #{SubjectCode}, ACCOUNT_NAME = #{depositName}
		where DETAIL_AC_CODE = #{depositCode}
	</update>
	
	<update id="FT_DepositUpdate" parameterType = "java.util.Map">
		update bank_account_tbl
		set CUSTOMER_CODE = #{AccCode}, BA_NUMBER = #{AccountNo}, BA_HOLDER = #{AccountHolder}
		where BA_CODE = #{depositCode}
	</update>
	
	<!-- 예금삭제 -->
	<delete id="FT_DepositPrevDelete" parameterType = "java.util.Map">
		delete from detail_ac_tbl
		where DETAIL_AC_CODE = #{key}
	</delete>
	
	<delete id="FT_DepositDelete" parameterType = "java.util.Map">
		delete from bank_account_tbl
		where BA_CODE = #{key}
	</delete>
	
	<!-- 카드 가져오기 -->
	<select id="FT_CardManagementSelect" resultType="com.pj.erp.vo.FT.FT_Card">
		SELECT
		cd.card_code as cardCode, cd.card_name as cardName, 
		c.customer_code as accCode, c.customer_name as accName, a.ACCOUNTS_CODE as subjectCode,
		ac.ACCOUNTS_NAME as subjectName, cd.card_type as cardType, cd.card_Obj as cardPurpose, cd.card_owner as owner, 
		cd.ba_code as payCode, b.ba_number as accountNo, b.ba_holder as accountHolder
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, CARD_LIST_TBL cd, accounts_tbl ac
		where a.DETAIL_AC_CODE = cd.cardCode
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and cd.customer_code = c.customer_code
		and cd.ba_code = b.ba_code
		order by b.BA_CODE asc
	</select>
	
	<!-- 카드 key 가져오기 -->
	<select id="FT_CardManagementKeySelect" resultType="String">
		select card_code from CARD_LIST_TBL
		where ROWNUM = 1
		ORDER BY card_code desc
	</select>
	
	<!-- 카드 추가 -->
	<insert id="FT_CardManagementPrevInsert" parameterType = "java.util.Map">
		insert into detail_ac_tbl(ACCOUNTS_CODE, DETAIL_AC_CODE, ACCOUNT_NAME)
		values (#{SubjectCode}, 'CD_' || cards_seq.nextval, #{CardName})
	</insert>
	
	<insert id="FT_CardManagementInsert" parameterType = "java.util.Map">
		insert into CARD_LIST_TBL(card_code, customer_code, card_name, card_type, card_Obj, card_owner, ba_code)
		values ('CD_' || cards_seq.currval, #{AccCode}, #{CardName}, #{CardType}, #{CardPurpose}, #{Owner}, #{PayCode})
	</insert>
	
	<!-- 카드수정 -->
	<update id="FT_CardManagementPrevUpdate" parameterType = "java.util.Map">
		update detail_ac_tbl
		set ACCOUNTS_CODE = #{SubjectCode}, ACCOUNT_NAME = #{CardName}
		where DETAIL_AC_CODE = #{CardCode}
	</update>
	
	<update id="FT_CardManagementUpdate" parameterType = "java.util.Map">
		update CARD_LIST_TBL
		set customer_code = #{AccCode}, card_name = #{CardName}, card_type = #{CardType},
		card_Obj = #{CardPurpose}, card_owner = #{Owner}, ba_code = #{PayCode}
		where card_code = #{CardCode}
	</update>
	
	<!-- 카드삭제 -->
	<delete id="FT_CardManagementPrevDelete" parameterType = "java.util.Map">
		delete from detail_ac_tbl
		where DETAIL_AC_CODE = #{key}
	</delete>
	
	<delete id="FT_CardManagementDelete" parameterType = "java.util.Map">
		delete from CARD_LIST_TBL
		where card_code = #{key}
	</delete>
	
	<!-- 거래처 가져오기 -->
	<select id="FT_AccountAllSelect" resultType="com.pj.erp.vo.FT.FT_Account">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
	</select>
	
	<!-- 거래처 개수 가져오기 -->
	<select id="FT_AccountCntSelect" parameterType="String" resultType="int">
		SELECT
	    count(c.customer_code)
	    FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
		and (c.customer_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.customer_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.license_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 거래처 한개 가져오기 -->
	<select id="FT_AccountOneSelect" parameterType="String" resultType="com.pj.erp.vo.FT.FT_Account">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
		and c.customer_code = #{srhval, jdbcType=VARCHAR}
	</select>
	
	<!-- 거래처 가져오기 -->
	<select id="FT_AccountSelect" parameterType="String" resultType="com.pj.erp.vo.FT.FT_Account">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
		and (c.customer_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.customer_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.license_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 계정과목 가져오기 -->
	<select id="FT_SubjectAllSelect" resultType="com.pj.erp.vo.FT.FT_Subject">
		select de.detail_ac_code, de.account_name, de.di_table, ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
	</select>
	
	<!-- 계정과목 개수 가져오기 -->
	<select id="FT_SubjectCntSelect" parameterType="String" resultType="int">
		select count(de.detail_ac_code)
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
		and (de.detail_ac_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or de.account_name like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 계정과목 검색한 것 가져오기 -->
	<select id="FT_SubjectSelect" resultType="com.pj.erp.vo.FT.FT_Subject">
		select de.detail_ac_code, de.account_name, de.di_table, ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
		and (de.detail_ac_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or de.account_name like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	
	<!-- 중계정과목 가져오기 -->
	<select id="FT_AccSubjectAllSelect" resultType="com.pj.erp.vo.FT.FT_Subject">
		select ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
	</select>
	
	<!-- 중계정과목 개수 가져오기 -->
	<select id="FT_AccSubjectCntSelect" parameterType="String" resultType="int">
		select count(de.detail_ac_code)
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
		and (ac.accounts_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or ac.accounts_name like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 중계정과목 검색한 것 가져오기 -->
	<select id="FT_AccSubjectSelect" resultType="com.pj.erp.vo.FT.FT_Subject">
		select ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
		and (ac.accounts_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or ac.accounts_name like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 사원 가져오기 -->
	<select id="FT_UsersAllSelect" resultType="com.pj.erp.vo.HR.HR_VO">
		select * from users
		order by TO_NUMBER(username)
	</select>
	
	<!-- 사원 개수 가져오기 -->
	<select id="FT_UsersCntSelect" parameterType="String" resultType="int">
		select count(username) from users
		where (username like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or e_name like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 사원 검색한 것 가져오기 -->
	<select id="FT_UsersSelect" resultType="com.pj.erp.vo.HR.HR_VO">
		select * from users
		where (username like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or e_name like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 단기차입금 목록 검색결과 -->
	<select id="getSBorrowList" resultType="com.pj.erp.vo.FT.FT_Short_Borrow_List" parameterType = "java.util.Map">
		select * from shortterm_debt_tbl 
		<if test = "customer_code != null">
			<if test = "username != null">
				where customer_code = '%'||#{customer_code}||'%' and username = '%'||#{username}||'%'
			</if>
			<if test = "username == null">
				where customer_code = '%'||#{customer_code}||'%' 
			</if>
		</if>
		<if test = "customer_code == null">
			<if test = "username != null">
				where username = '%'||#{username}||'%'
			</if>
			<if test = "username == null">
			</if>
		</if>
	</select>
	
	<!-- 장기차입금 목록 검색결과 -->
	<select id="getLBorrowList" resultType="com.pj.erp.vo.FT.FT_Long_Borrow_List" parameterType = "java.util.Map">
		select * from longterm_debt_tbl 
		<if test = "customer_code != null">
			<if test = "username != null">
				where customer_code = '%'||#{customer_code}||'%' and username = '%'||#{username}||'%'
			</if>
			<if test = "username == null">
				where customer_code = '%'||#{customer_code}||'%' 
			</if>
		</if>
		<if test = "customer_code == null">
			<if test = "username != null">
				where username = '%'||#{username}||'%'
			</if>
			<if test = "username == null">
			</if>
		</if>
	</select>
	
	<!-- 지급어음 목록 검색결과 -->
	<select id="getBillPaymentList" resultType="com.pj.erp.vo.FT.FT_Bill_payment_VO" parameterType = "java.util.Map">
		select * from bill_payment_tbl
		<if test = "customer_code != null">
				where customer_code = '%'||#{customer_code}||'%' 
		</if>
		<if test = "customer_code == null">
		</if>
	</select>
	
	<!-- 토지목록 검색결과 -->
	<select id="getLandList" resultType="com.pj.erp.vo.FT.FT_land_list_VO" parameterType = "java.util.Map">
		select * from land_tbl
		<if test = "department_code != null">
			<if test = "land_name != null">
				where department_code = '%'||#{department_code}||'%' and land_name = '%'||#{land_name}||'%'
			</if>
			<if test = "land_name == null">
				where department_code = '%'||#{department_code}||'%' 
			</if>
		</if>
		<if test = "department_code == null">
			<if test = "land_name != null">
				where land_name = '%'||#{land_name}||'%'
			</if>
			<if test = "land_name == null">
			</if>
		</if>
	</select>
	
	<!-- 설비목록 검색결과 -->
	<select id="getFacilityList" resultType="com.pj.erp.vo.FT.FT_facility_list_VO" parameterType = "java.util.Map">
		select * from equipment_tbl
		<if test = "department_code != null">
			<if test = "eq_name != null">
				where department_code = '%'||#{department_code}||'%' and eq_name = '%'||#{eq_name}||'%'
			</if>
			<if test = "eq_name == null">
				where department_code = '%'||#{department_code}||'%' 
			</if>
		</if>
		<if test = "department_code == null">
			<if test = "eq_name != null">
				where eq_name = '%'||#{eq_name}||'%'
			</if>
			<if test = "eq_name == null">
			</if>
		</if>
	</select>
	
	<!-- 분개 데이터 갯수 가져오기 -->
	<select id="FT_chitDistinctCnt" parameterType="java.util.Map" resultType="int">
		select count(journal_number) 
		from journal_record_tbl
		where journal_date between to_date(#{firstday}) and to_date(#{lastday})
		<if test="state == 1">
			and username is null
		</if>
		<if test="state == 2">
			and username is not null
		</if>
	</select>
	
	<!-- 분개 데이터 가져오기 -->
	<select id="FT_ChitDistinct" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_Chit">
		select DISTINCT journal_number, journal_date, j.username username, u.e_name fname
		from journal_record_tbl j, users u
        where j.username = u.username(+)
		and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
		<if test="state == 1">
			and j.username is null
		</if>
		<if test="state == 2">
			and j.username is not null
		</if>
		order by to_char(journal_date, 'yyyy-MM-dd'), to_number(journal_number)
	</select>
	
	<!-- 검색된 모든 분개 갯수 가져오기 -->
	<select id="FT_journalListCnt" parameterType="java.util.Map" resultType="int">
		select count(journal_number) 
		from journal_record_tbl
		where journal_date between to_date(#{firstday}) and to_date(#{lastday})
		<if test="usercode != null">
			and username like '%' || #{usercode} || '%'
		</if>
	</select>
	
	<!-- 검색된 모든 분개 가져오기 -->
	<select id="FT_journalList" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_Chit">
		select j.journal_code, j.journal_number, j.journal_date, de.detail_ac_code, de.account_name,
		c.customer_code, c.customer_name, j.debtor_value, j.creditor_value, j.l_count_value, j.r_count_value, j.journal_abstract,
		j.jr_state, j.last_update, j.last_modi_user, writer.e_name wname, j.username
		from journal_record_tbl j, detail_ac_tbl de, customer_list_tbl c, users writer
		where j.detail_ac_code = de.detail_ac_code
		and j.customer_code = c.customer_code
		and writer.username = j.last_modi_user
		and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
		<if test="usercode != null and usercode != ''">
			and j.last_modi_user like '%' || #{usercode} || '%'
		</if>
		order by 3 asc, 2 asc
	</select>
	
	<!-- 거래처 원장 리스트 갯수 가져오기 -->
	<select id="FT_ledgerListCnt" parameterType="java.util.Map" resultType="int">
		<![CDATA[
		select count(c.customer_code)
		from journal_record_tbl j, detail_ac_tbl de, customer_list_tbl c, b_license_tbl b, (select distinct CASE WHEN count(customer_code) = 0 THEN null
        ELSE customer_code END as customer_code, CASE WHEN count(customer_code) = 0 THEN 0
         WHEN (sum(debtor_value)-sum(creditor_value)) <= 0 THEN 0
        ELSE (sum(debtor_value)-sum(creditor_value)) END as debtor_value
		from journal_record_tbl j, detail_ac_tbl de
		where j.detail_ac_code = de.detail_ac_code
		and to_char(j.journal_date,'yyyy-MM') = #{year} || '-' || #{month}
		and de.detail_ac_code = #{scode}
		group by j.customer_code) bval
        where j.customer_code = c.customer_code
        and c.license_number = b.license_number
        and j.detail_ac_code = de.detail_ac_code
        and bval.customer_code(+) = j.customer_code
        and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
        and de.detail_ac_code = #{scode}
    	]]>
    	<if test="acode != null and acode != ''">
        	and c.customer_code = #{acode}
        </if>
	</select>
	
	<!-- 거래처 원장 리스트 가져오기 -->
	<select id="FT_ledgerList" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_Ledger">
	<![CDATA[
		select c.customer_code, c.customer_name, c.license_number, CASE WHEN bval.debtor_value is null THEN 0
        ELSE bval.debtor_value END as before_value, 
		sum(j.debtor_value) debtor_value, sum(j.creditor_value) creditor_value, sum(j.l_count_value) l_count_value, sum(j.r_count_value) r_count_value,
    	c.deal_state, b.bs_master
		from journal_record_tbl j, detail_ac_tbl de, customer_list_tbl c, b_license_tbl b, (select distinct CASE WHEN count(customer_code) = 0 THEN null
        ELSE customer_code END as customer_code, CASE WHEN count(customer_code) = 0 THEN 0
         WHEN (sum(debtor_value)-sum(creditor_value)) <= 0 THEN 0
        ELSE (sum(debtor_value)-sum(creditor_value)) END as debtor_value
		from journal_record_tbl j, detail_ac_tbl de
		where j.detail_ac_code = de.detail_ac_code
		and to_char(j.journal_date,'yyyy-MM') = #{year} || '-' || #{month}
		and de.detail_ac_code = #{scode}
		group by j.customer_code) bval
        where j.customer_code = c.customer_code
        and c.license_number = b.license_number
        and j.detail_ac_code = de.detail_ac_code
        and bval.customer_code(+) = j.customer_code
        and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
        and de.detail_ac_code = #{scode}
    	]]>
    	<if test="acode != null and acode != ''">
        	and c.customer_code = #{acode}
        </if>
        group by c.customer_code, c.customer_name, c.license_number, bval.debtor_value, c.deal_state, b.bs_master
	</select>
	
	<!-- 거래처 분개 리스트 갯수 가져오기 -->
	<select id="FT_ledgerAccListCnt" parameterType="java.util.Map" resultType="int">
		select count(j.detail_ac_code)
		from journal_record_tbl j, detail_ac_tbl de, customer_list_tbl c, users writer
		where j.detail_ac_code = de.detail_ac_code
		and j.customer_code = c.customer_code
		and writer.username = j.last_modi_user
		and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
		and de.detail_ac_code = #{scode}
		and c.customer_code = #{acode}
	</select>
	
	<!-- 거래처 분개 리스트 가져오기 -->
	<select id="FT_ledgerAccList" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_Chit">
		select j.journal_code, j.journal_number, j.journal_date, de.detail_ac_code, de.account_name,
		c.customer_code, c.customer_name, j.debtor_value, j.creditor_value, j.l_count_value, j.r_count_value, j.journal_abstract,
		j.jr_state, j.last_update, j.last_modi_user, writer.e_name wname, j.username, l.lg_name
		from journal_record_tbl j, detail_ac_tbl de, customer_list_tbl c, users writer
		, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
		where j.detail_ac_code = de.detail_ac_code
		and j.customer_code = c.customer_code
		and writer.username = j.last_modi_user
        and l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
		and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
		and de.detail_ac_code = #{scode}
		and c.customer_code = #{acode}
	</select>
	
	<!-- 일별 리스트 갯수 가져오기 -->
	<select id="FT_DTBDayListCntL" parameterType="java.util.Map" resultType="int">
		select count(*) from        
		(select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, l.lg_code, l.lg_name
				from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
				where j.detail_ac_code = de.detail_ac_code
		        and l.lg_code = a.lg_code
				and a.ag_code = ac.ag_code2
		        and ac.accounts_code = de.accounts_code
		        and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
		        group by l.lg_code, l.lg_name)
	</select>
	<select id="FT_DTBDayListCntM" parameterType="java.util.Map" resultType="int">
		select count(*) from        
		(select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
		where j.detail_ac_code = de.detail_ac_code
        and l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
        and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
        group by a.ag_code, a.ag_name, l.lg_code, l.lg_name)
	</select>
	<select id="FT_DTBDayListCntS" parameterType="java.util.Map" resultType="int">
		select count(*) from        
		(select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name
		from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
		where j.detail_ac_code = de.detail_ac_code
        and l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
        and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
        group by ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name)
	</select>
	
	<!-- 일별 리스트 가져오기 -->
	<select id="FT_DTBDayListL" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_DTB">
		select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, l.lg_code, l.lg_name
				from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
				where j.detail_ac_code = de.detail_ac_code
		        and l.lg_code = a.lg_code
				and a.ag_code = ac.ag_code2
		        and ac.accounts_code = de.accounts_code
		        and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
		        group by l.lg_code, l.lg_name
	</select>
	<select id="FT_DTBDayListM" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_DTB">
		select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
		where j.detail_ac_code = de.detail_ac_code
        and l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
        and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
        group by a.ag_code, a.ag_name, l.lg_code, l.lg_name
	</select>
	<select id="FT_DTBDayListS" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_DTB">
		select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name
		from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
		where j.detail_ac_code = de.detail_ac_code
        and l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
        and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
        group by ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name
	</select>
	
	<!-- 월별 리스트 갯수 가져오기 -->
	<select id="FT_DTBMonthListCntL" parameterType="java.util.Map" resultType="int">
		select count(*) from        
		(select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, l.lg_code, l.lg_name
				from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
				where j.detail_ac_code = de.detail_ac_code
		        and l.lg_code = a.lg_code
				and a.ag_code = ac.ag_code2
		        and ac.accounts_code = de.accounts_code
		        and j.journal_date between to_date(#{firstday} || '-01') and to_date(#{lastday} || '-' || #{day})
		        group by l.lg_code, l.lg_name)
	</select>
	<select id="FT_DTBMonthListCntM" parameterType="java.util.Map" resultType="int">
		select count(*) from        
		(select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
		where j.detail_ac_code = de.detail_ac_code
        and l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
        and j.journal_date between to_date(#{firstday} || '-01') and to_date(#{lastday} || '-' || #{day})
        group by a.ag_code, a.ag_name, l.lg_code, l.lg_name)
	</select>
	<select id="FT_DTBMonthListCntS" parameterType="java.util.Map" resultType="int">
		select count(*) from        
		(select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name
		from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
		where j.detail_ac_code = de.detail_ac_code
        and l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
        and j.journal_date between to_date(#{firstday} || '-01') and to_date(#{lastday} || '-' || #{day})
        group by ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name)
	</select>
	
	<!-- 월별 리스트 가져오기 -->
	<select id="FT_DTBMonthListL" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_DTB">
		select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, l.lg_code, l.lg_name
				from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
				where j.detail_ac_code = de.detail_ac_code
		        and l.lg_code = a.lg_code
				and a.ag_code = ac.ag_code2
		        and ac.accounts_code = de.accounts_code
		        and j.journal_date between to_date(#{firstday} || '-01') and to_date(#{lastday} || '-' || #{day})
		        group by l.lg_code, l.lg_name
	</select>
	<select id="FT_DTBMonthListM" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_DTB">
		select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
		where j.detail_ac_code = de.detail_ac_code
        and l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
        and j.journal_date between to_date(#{firstday} || '-01') and to_date(#{lastday} || '-' || #{day})
        group by a.ag_code, a.ag_name, l.lg_code, l.lg_name
	</select>
	<select id="FT_DTBMonthListS" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_DTB">
		select sum(j.debtor_value) debtorsum, sum(j.creditor_value) creditorsum, ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name
		from journal_record_tbl j, detail_ac_tbl de, ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac
		where j.detail_ac_code = de.detail_ac_code
        and l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
        and j.journal_date between to_date(#{firstday} || '-01') and to_date(#{lastday} || '-' || #{day})
        group by ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name
	</select>
	
	<!-- 전표승인처리 -->
	<update id="FT_CheckFormal" parameterType="java.util.Map">
		update journal_record_tbl
		set username = #{username}
		where journal_date = #{dates}
		and journal_number = #{nos}
	</update>
	
	<!-- 받을어음 가져오기 -->
	<!-- <select id="FT_NoteAllSelect" resultType="com.pj.erp.vo.FT.FT_Note">
		SELECT
		b.bill_r_code, a.account_name as noteNumber, 
		c.customer_code, c.customer_name, b.payment_price,
		b.payment_date, b.payment_expriration, b.payment_interest
		FROM detail_ac_tbl a, bill_receivable_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.bill_r_code
		and b.customer_code = c.customer_code
		order by b.bill_r_code asc
	</select> -->
	
	<!-- 받을어음 key 가져오기 -->
	<!-- <select id="FT_NoteKeySelect" resultType="String">
		select bill_r_code from bill_receivable_tbl
		where ROWNUM = 1
		ORDER BY bill_r_code desc
	</select> -->
	
	<!-- 받을어음 추가 -->
	<!-- <insert id="FT_NotePrevInsert" parameterType = "java.util.Map">
		insert into detail_ac_tbl(ACCOUNTS_CODE, DETAIL_AC_CODE, ACCOUNT_NAME, di_table)
		values (받을어음 코드번호, 'NT_' || note_seq.nextval, #{noteNumber} || '(받을어음)', 받을어음 관련 테이블명)
	</insert>
	
	<insert id="FT_NoteInsert" parameterType = "java.util.Map">
		insert into bill_receivable_tbl(bill_r_code, customer_code, payment_price, payment_date,
		payment_expriration, payment_interest)
		values ('NT_' || note_seq.currval, #{AccCode}, #{price}, #{startDate},
		#{endDate}, #{lend})
	</insert> -->
	
	<!-- 받을어음 수정 -->
	<!-- <update id="FT_NotePrevUpdate" parameterType = "java.util.Map">
		update detail_ac_tbl
		set ACCOUNT_NAME = #{noteNumber} || '(받을어음)'
		where DETAIL_AC_CODE = #{noteCode}
	</update>
	
	<update id="FT_NoteUpdate" parameterType = "java.util.Map">
		update bill_receivable_tbl
		set CUSTOMER_CODE = #{AccCode}, payment_price = #{price}, payment_date = #{startDate},
		payment_expriration = #{endDate}, payment_interest = #{lend}
		where bill_r_code = #{noteCode}
	</update> -->
	
	<!-- 받을어음 삭제 -->
	<!-- <delete id="FT_NotePrevDelete" parameterType = "java.util.Map">
		delete from detail_ac_tbl
		where DETAIL_AC_CODE = #{key}
	</delete>
	
	<delete id="FT_NoteDelete" parameterType = "java.util.Map">
		delete from bill_receivable_tbl
		where bill_r_code = #{key}
	</delete> -->
	
	<!-- 단기대여금 가져오기 -->
	<!-- <select id="FT_NoteAllSelect" resultType="com.pj.erp.vo.FT.FT_Note">
		SELECT
		b.BA_CODE as depositCode, a.account_name as depositName, 
		c.customer_code as accCode, c.customer_name as accName, a.ACCOUNTS_CODE as subjectCode,
		ac.ACCOUNTS_NAME as subjectName, b.ba_number as accountNo, b.ba_holder as accountHolder
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.ba_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and b.customer_code = c.customer_code
		order by b.BA_CODE asc
	</select> -->
	
	<!-- 단기대여금 개수 가져오기 -->
	<!-- <select id="FT_NoteCntSelect" parameterType="String" resultType="int">
		select count(b.BA_CODE)
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.ba_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and b.customer_code = c.customer_code
		and (b.BA_CODE like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or a.account_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or b.ba_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select> -->
	
	<!-- 단기대여금 검색한 것 가져오기 -->
	<!-- <select id="FT_NoteSelect" parameterType="String" resultType="com.pj.erp.vo.FT.FT_Note">
		SELECT
		b.BA_CODE as depositCode, a.account_name as depositName, 
		c.customer_code as accCode, c.customer_name as accName, a.ACCOUNTS_CODE as subjectCode,
		ac.ACCOUNTS_NAME as subjectName, b.ba_number as accountNo, b.ba_holder as accountHolder
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.ba_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and b.customer_code = c.customer_code
		and (b.BA_CODE like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or a.account_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or b.ba_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select> -->
	
	<!-- 단기대여금 key 가져오기 -->
	<!-- <select id="FT_NoteKeySelect" resultType="String">
		select ba_code from bank_account_tbl
		where ROWNUM = 1
		ORDER BY ba_code desc
	</select> -->
	
	<!-- 단기대여금 추가 -->
	<!-- <insert id="FT_NotePrevInsert" parameterType = "java.util.Map">
		insert into detail_ac_tbl(ACCOUNTS_CODE, DETAIL_AC_CODE, ACCOUNT_NAME)
		values (#{SubjectCode}, 'DE_' || accounts_seq.nextval, #{depositName})
	</insert>
	
	<insert id="FT_NoteInsert" parameterType = "java.util.Map">
		insert into bank_account_tbl(BA_CODE, CUSTOMER_CODE, BA_NUMBER, BA_HOLDER)
		values ('DE_' || accounts_seq.currval, #{AccCode}, #{AccountNo}, #{AccountHolder})
	</insert> -->
	
	<!-- 단기대여금 수정 -->
	<!-- <update id="FT_NotePrevUpdate" parameterType = "java.util.Map">
		update detail_ac_tbl
		set ACCOUNTS_CODE = #{SubjectCode}, ACCOUNT_NAME = #{depositName}
		where DETAIL_AC_CODE = #{depositCode}
	</update>
	
	<update id="FT_NoteUpdate" parameterType = "java.util.Map">
		update bank_account_tbl
		set CUSTOMER_CODE = #{AccCode}, BA_NUMBER = #{AccountNo}, BA_HOLDER = #{AccountHolder}
		where BA_CODE = #{depositCode}
	</update> -->
	
	<!-- 단기대여금 삭제 -->
	<!-- <delete id="FT_NotePrevDelete" parameterType = "java.util.Map">
		delete from detail_ac_tbl
		where DETAIL_AC_CODE = #{key}
	</delete>
	
	<delete id="FT_NoteDelete" parameterType = "java.util.Map">
		delete from bank_account_tbl
		where BA_CODE = #{key}
	</delete> -->
	
	<!-- 단기매매증권 가져오기 -->
	<!-- <select id="FT_NoteAllSelect" resultType="com.pj.erp.vo.FT.FT_Note">
		SELECT
		b.BA_CODE as depositCode, a.account_name as depositName, 
		c.customer_code as accCode, c.customer_name as accName, a.ACCOUNTS_CODE as subjectCode,
		ac.ACCOUNTS_NAME as subjectName, b.ba_number as accountNo, b.ba_holder as accountHolder
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.ba_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and b.customer_code = c.customer_code
		order by b.BA_CODE asc
	</select> -->
	
	<!-- 단기매매증권 개수 가져오기 -->
	<!-- <select id="FT_NoteCntSelect" parameterType="String" resultType="int">
		select count(b.BA_CODE)
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.ba_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and b.customer_code = c.customer_code
		and (b.BA_CODE like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or a.account_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or b.ba_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select> -->
	
	<!-- 단기매매증권 검색한 것 가져오기 -->
	<!-- <select id="FT_NoteSelect" parameterType="String" resultType="com.pj.erp.vo.FT.FT_Note">
		SELECT
		b.BA_CODE as depositCode, a.account_name as depositName, 
		c.customer_code as accCode, c.customer_name as accName, a.ACCOUNTS_CODE as subjectCode,
		ac.ACCOUNTS_NAME as subjectName, b.ba_number as accountNo, b.ba_holder as accountHolder
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.ba_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and b.customer_code = c.customer_code
		and (b.BA_CODE like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or a.account_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or b.ba_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select> -->
	
	<!-- 단기매매증권 key 가져오기 -->
	<!-- <select id="FT_NoteKeySelect" resultType="String">
		select ba_code from bank_account_tbl
		where ROWNUM = 1
		ORDER BY ba_code desc
	</select> -->
	
	<!-- 단기매매증권 추가 -->
	<!-- <insert id="FT_NotePrevInsert" parameterType = "java.util.Map">
		insert into detail_ac_tbl(ACCOUNTS_CODE, DETAIL_AC_CODE, ACCOUNT_NAME)
		values (#{SubjectCode}, 'DE_' || accounts_seq.nextval, #{depositName})
	</insert>
	
	<insert id="FT_NoteInsert" parameterType = "java.util.Map">
		insert into bank_account_tbl(BA_CODE, CUSTOMER_CODE, BA_NUMBER, BA_HOLDER)
		values ('DE_' || accounts_seq.currval, #{AccCode}, #{AccountNo}, #{AccountHolder})
	</insert> -->
	
	<!-- 단기매매증권 수정 -->
	<!-- <update id="FT_NotePrevUpdate" parameterType = "java.util.Map">
		update detail_ac_tbl
		set ACCOUNTS_CODE = #{SubjectCode}, ACCOUNT_NAME = #{depositName}
		where DETAIL_AC_CODE = #{depositCode}
	</update>
	
	<update id="FT_NoteUpdate" parameterType = "java.util.Map">
		update bank_account_tbl
		set CUSTOMER_CODE = #{AccCode}, BA_NUMBER = #{AccountNo}, BA_HOLDER = #{AccountHolder}
		where BA_CODE = #{depositCode}
	</update> -->
	
	<!-- 단기매매증권 삭제 -->
	<!-- <delete id="FT_NotePrevDelete" parameterType = "java.util.Map">
		delete from detail_ac_tbl
		where DETAIL_AC_CODE = #{key}
	</delete>
	
	<delete id="FT_NoteDelete" parameterType = "java.util.Map">
		delete from bank_account_tbl
		where BA_CODE = #{key}
	</delete> -->
	
	<!-- 재무상태표 계정별 합계_권순용 -->
	<select id="FT_getAssetsList" resultType="com.pj.erp.vo.FT.FT_accounts_balance">
		select * from getBalanceShit_t_view where lg_name=#{typename} order by acc_level
	</select>
	
	<select id="FT_getIsList" resultType="com.pj.erp.vo.FT.FT_accounts_balance">
		select * from getBalanceShit_t_view where accounts_name=#{typename} order by acc_level
	</select>
	
</mapper>