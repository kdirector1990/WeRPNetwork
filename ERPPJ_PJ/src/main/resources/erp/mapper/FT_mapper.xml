<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace = "com.pj.erp.persistence.FT_DAO">
	<!-- 거래처 추가 -->
	<insert id="FT_AccInsert" parameterType = "java.util.Map">
		insert into customer_list_tbl(customer_code, customer_name, deal_state)
		values(customer_seq.nextval, #{AccName}, #{type}) 
	</insert>
	
	<!-- 적금 가져오기 -->
	<select id="FT_SavingsSelect" resultType="com.pj.erp.vo.FT.FT_Savings">
		SELECT
		a.account_code as savingsCode, a.account_name as savingsName, 
		c.customer_code as accCode, c.customer_name as accName, a.ag_code as subjectCode,
		ag.ag_name as subjectName, s.sa_number as accountNo, s.sa_holder as accountHolder, s.sa_amount as devPrice
		FROM ACCOUNTS_TBL a, SAVING_ACCOUNT_TBL s, customer_list_tbl c, accounts_group_tbl ag
		where a.account_code = s.sa_code
		and a.ag_code = ag.ag_code
		and s.customer_code = c.customer_code
		order by to_number(a.account_code) asc
	</select>
	
	<!-- 적금 key 가져오기 -->
	<select id="FT_SavingsKeySelect" resultType="String">
		select sa_code from SAVING_ACCOUNT_TBL
		where ROWNUM = 1
		ORDER BY to_number(sa_code) desc
	</select>
	
	<!-- 적금 추가 -->
	<insert id="FT_SavingsPrevInsert" parameterType = "java.util.Map">
		insert into ACCOUNTS_TBL(AG_CODE, ACCOUNT_CODE, ACCOUNT_NAME)
		values (#{SubjectCode}, accounts_seq.nextval, #{savingsName})
	</insert>
	
	<insert id="FT_SavingsInsert" parameterType = "java.util.Map">
		insert into SAVING_ACCOUNT_TBL(SA_CODE, CUSTOMER_CODE, SA_NUMBER, SA_HOLDER, SA_AMOUNT)
		values (accounts_seq.currval, #{AccCode}, #{AccountNo}, #{AccountHolder}, #{DevPrice})
	</insert>
	
	<!-- 적금수정 -->
	<insert id="FT_SavingsPrevUpdate" parameterType = "java.util.Map">
		update ACCOUNTS_TBL
		set AG_CODE = #{SubjectCode}, ACCOUNT_NAME = #{savingsName}
		where ACCOUNT_CODE = #{savingsCode}
	</insert>
	
	<insert id="FT_SavingsUpdate" parameterType = "java.util.Map">
		update SAVING_ACCOUNT_TBL
		set CUSTOMER_CODE = #{AccCode}, SA_NUMBER = #{AccountNo}, SA_HOLDER = #{AccountHolder}, SA_AMOUNT = #{DevPrice}
		where SA_CODE = #{savingsCode}
	</insert>
	
	<!-- 예금 가져오기 -->
	<select id="FT_DepositSelect" resultType="com.pj.erp.vo.FT.FT_Savings">
		SELECT
		a.account_code as depositCode, a.account_name as depositName, 
		c.customer_code as accCode, c.customer_name as accName, a.ag_code as subjectCode,
		ag.ag_name as subjectName, b.ba_number as accountNo, d.ba_holder as accountHolder
		FROM ACCOUNTS_TBL a, bank_account_tbl b, customer_list_tbl c, accounts_group_tbl ag
		where a.account_code = b.ba_code
		and a.ag_code = ag.ag_code
		and b.customer_code = c.customer_code
		order by to_number(a.account_code) asc
	</select>
	
	<!-- 예금 key 가져오기 -->
	<select id="FT_DepositKeySelect" resultType="String">
		select ba_code from bank_account_tbl
		where ROWNUM = 1
		ORDER BY to_number(ba_code) desc
	</select>
	
	<!-- 예금 추가 -->
	<insert id="FT_DepositPrevInsert" parameterType = "java.util.Map">
		insert into ACCOUNTS_TBL(AG_CODE, ACCOUNT_CODE, ACCOUNT_NAME)
		values (#{SubjectCode}, accounts_seq.nextval, #{depositName})
	</insert>
	
	<insert id="FT_DepositInsert" parameterType = "java.util.Map">
		insert into bank_account_tbl(BA_CODE, CUSTOMER_CODE, BA_NUMBER, BA_HOLDER)
		values (accounts_seq.currval, #{AccCode}, #{AccountNo}, #{AccountHolder})
	</insert>
	
	<!-- 예금수정 -->
	<insert id="FT_DepositPrevUpdate" parameterType = "java.util.Map">
		update ACCOUNTS_TBL
		set AG_CODE = #{SubjectCode}, ACCOUNT_NAME = #{depositName}
		where ACCOUNT_CODE = #{depositCode}
	</insert>
	
	<insert id="FT_DepositUpdate" parameterType = "java.util.Map">
		update bank_account_tbl
		set CUSTOMER_CODE = #{AccCode}, BA_NUMBER = #{AccountNo}, BA_HOLDER = #{AccountHolder}
		where BA_CODE = #{depositCode}
	</insert>
	
	<!-- 거래처 가져오기 -->
	<select id="FT_AccountAllSelect" resultType="com.pj.erp.vo.FT.FT_Account">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
	</select>
	
	<!-- 거래처 개수 가져오기 -->
	<select id="FT_AccountCntSelect" parameterType="String" resultType="int">
		SELECT
	    count(c.customer_code)
		where c.license_number = b.license_number
		and (c.customer_code like '%'||#{srhval}||'%'
		or c.customer_name like '%'||#{srhval}||'%'
		or c.license_number like '%'||#{srhval}||'%')
	</select>
	
	<!-- 거래처 가져오기 -->
	<select id="FT_AccountSelect" parameterType="String" resultType="com.pj.erp.vo.FT.FT_Account">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
		and (c.customer_code like '%' || upper(#{srhval}) || '%' or c.customer_code like '%' || lower(#{srhval}) || '%'
		or c.customer_name like '%' || upper(#{srhval}) || '%' or c.customer_name like '%' || lower(#{srhval}) || '%'
		or c.license_number like '%' || upper(#{srhval}) || '%' or c.license_number like '%' || lower(#{srhval}) || '%')
	</select>
	
	<!-- 계정과목 가져오기 -->
	<select id="FT_SubjectAllSelect" resultType="com.pj.erp.vo.FT.FT_Subject">
		select de.detail_ac_code, de.account_name, de.di_table, ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
	</select>
	
	<!-- 계정과목 검색한 것 가져오기 -->
	<select id="FT_SubjectSelect" resultType="com.pj.erp.vo.FT.FT_Subject">
		select de.detail_ac_code, de.account_name, de.di_table, ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
		and (ac.detail_ac_code like '%' || upper(#{srhval}) || '%' or ac.detail_ac_code like '%' || lower(#{srhval}) || '%'
		or ac.account_name like '%' || upper(#{srhval}) || '%' or ac.account_name like '%' || lower(#{srhval}) || '%')
	</select>
	
</mapper>