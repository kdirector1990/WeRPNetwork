<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace = "com.pj.erp.persistence.FT_DAO">
	<!-- 날짜 검색 분개 가져오기 -->
	<select id="FT_DateChitCnt" parameterType="java.util.Map" resultType="int">
		select count(*) 
		from journal_record_tbl
		where to_char(journal_date, 'yyyy-MM-dd') = #{year} || '-' || #{month} || '-' || #{day}
	</select>
	
	<!-- 거래번호 최고값 -->
	<select id="FT_ChitMaxNumber" parameterType="java.util.Map" resultType="int">
		select journal_number 
		from journal_record_tbl
		where to_char(journal_date, 'yyyy-MM-dd') = #{year} || '-' || #{month} || '-' || #{day}
		and rownum = 1
		order by 1 asc
	</select>
	
	<!-- 분개 데이터 갯수 가져오기 -->
	<select id="FT_chitDataCnt" parameterType="java.util.Map" resultType="int">
		select count(*) 
		from journal_record_tbl
		where to_char(journal_date, 'yyyy-MM-dd') = #{year} || '-' || #{month} || '-' || #{day}
		and journal_number = #{chkno}
	</select>
	
	<!-- 분개 데이터 가져오기 -->
	<select id="FT_chitDataLoad" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_Chit">
		select j.journal_code, j.journal_number, j.journal_date, de.detail_ac_code, de.account_name,
		c.customer_code, c.customer_name, j.debtor_value, j.creditor_value, j.l_count_value, j.r_count_value, j.journal_abstract,
		j.jr_state, j.last_update, j.last_modi_user, writer.e_name wname, j.username
		from journal_record_tbl j, detail_ac_tbl de, customer_list_tbl c, users writer
		where j.detail_ac_code = de.detail_ac_code
		and j.customer_code = c.customer_code
		and writer.username = j.last_modi_user
		and to_char(j.journal_date, 'yyyy-MM-dd') = #{year} || '-' || #{month} || '-' || #{day}
		and j.journal_number = #{chkno}
	</select>
	
	<!-- 분개 key 가져오기 -->
	<select id="FT_chitKeySelect" resultType="String">
		select JOURNAL_CODE from journal_record_tbl
		where ROWNUM = 1
		ORDER BY JOURNAL_CODE desc
	</select>
	
	<!-- 전표입력 -->
	<insert id="FT_chitInsert" parameterType = "java.util.Map">
		insert into journal_record_tbl(JOURNAL_CODE, JOURNAL_NUMBER, JOURNAL_DATE,
		DETAIL_AC_CODE, CUSTOMER_CODE, DEBTOR_VALUE, CREDITOR_VALUE, L_COUNT_VALUE, R_COUNT_VALUE,
		JOURNAL_ABSTRACT, JR_STATE, LAST_UPDATE, LAST_MODI_USER, USERNAME)
		values(journal_seq.nextval, #{number}, TO_DATE(#{date}), #{subjectcode}, #{accountcode},
		#{leftprice}, #{rightprice}, #{leftcount}, #{rightcount}, #{text}, #{type},
		#{updateday}, #{wname}, #{fname}) 
	</insert>
	
	<!-- 전표수정 -->
	<update id="FT_chitupdate" parameterType = "java.util.Map">
		update journal_record_tbl
		set JOURNAL_NUMBER = #{number}, JOURNAL_DATE = #{date}, DETAIL_AC_CODE = #{subjectcode},
		CUSTOMER_CODE = #{accountcode}, DEBTOR_VALUE = #{leftprice}, CREDITOR_VALUE = #{rightprice},
		L_COUNT_VALUE = #{leftcount}, R_COUNT_VALUE = #{rightcount}, JOURNAL_ABSTRACT = #{text},
		JR_STATE = #{type}, LAST_UPDATE = #{updateday}, LAST_MODI_USER = #{wname}
		<if test="fname != null">
			, USERNAME = #{fname}
		</if>
		where JOURNAL_CODE = #{key}
	</update>
	
	<!-- 전표삭제 -->
	<delete id="FT_chitDelete" parameterType = "java.util.Map">
		delete from journal_record_tbl
		where JOURNAL_CODE = #{key}
	</delete>

	<!-- 사업자 번호 추가 -->
	<insert id="FT_LicenseInsert" parameterType = "com.pj.erp.vo.FT.FT_Account">
		insert into b_license_tbl(license_number, bs_name, bs_master, bs_startdate,
		bs_number, bs_address, bs_address2, bs_condition, bs_line, license_scanfile)
		values(license_seq.nextval, #{bs_name}, #{bs_master}, #{bs_startdate},
		#{bs_number}, #{bs_address}, #{bs_address2}, #{bs_condition}, #{bs_line}, #{license_scanfile})
	</insert>
	
	<!-- 거래처 추가 -->
	<insert id="FT_AccountInsert" parameterType = "com.pj.erp.vo.FT.FT_Account">
		insert into customer_list_tbl(customer_code, license_number, customer_name, branch_name,
		customer_credit, deal_state)
		values(customer_seq.nextval, license_seq.currval, #{customer_name}, #{branch_name},
		#{customer_credit}, #{deal_state})
	</insert>
	
	<!-- 적금 가져오기 -->
	<select id="FT_SavingsSelect" resultType="com.pj.erp.vo.FT.FT_Savings">
		SELECT
		a.DETAIL_AC_CODE as savingsCode, a.account_name as savingsName, 
		c.customer_code as accCode, c.customer_name as accName, a.ACCOUNTS_CODE as subjectCode,
		ac.ACCOUNTS_NAME as subjectName, s.sa_number as accountNo, s.sa_holder as accountHolder, s.sa_amount as devPrice
		FROM detail_ac_tbl a, SAVING_ACCOUNT_TBL s, customer_list_tbl c, ACCOUNTS_TBL ac
		where a.DETAIL_AC_CODE = s.sa_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and s.customer_code = c.customer_code
		order by to_number(a.DETAIL_AC_CODE) asc
	</select>
	
	<!-- 적금 key 가져오기 -->
	<select id="FT_SavingsKeySelect" resultType="String">
		select sa_code from SAVING_ACCOUNT_TBL
		where ROWNUM = 1
		ORDER BY to_number(sa_code) desc
	</select>
	
	<!-- 적금 추가 -->
	<insert id="FT_SavingsPrevInsert" parameterType = "java.util.Map">
		insert into detail_ac_tbl(ACCOUNTS_CODE, DETAIL_AC_CODE, ACCOUNT_NAME)
		values (#{SubjectCode}, accounts_seq.nextval, #{savingsName})
	</insert>
	
	<insert id="FT_SavingsInsert" parameterType = "java.util.Map">
		insert into SAVING_ACCOUNT_TBL(SA_CODE, CUSTOMER_CODE, SA_NUMBER, SA_HOLDER, SA_AMOUNT)
		values (accounts_seq.currval, #{AccCode}, #{AccountNo}, #{AccountHolder}, #{DevPrice})
	</insert>
	
	<!-- 적금수정 -->
	<insert id="FT_SavingsPrevUpdate" parameterType = "java.util.Map">
		update detail_ac_tbl
		set ACCOUNTS_CODE = #{SubjectCode}, ACCOUNT_NAME = #{savingsName}
		where DETAIL_AC_CODE = #{savingsCode}
	</insert>
	
	<insert id="FT_SavingsUpdate" parameterType = "java.util.Map">
		update SAVING_ACCOUNT_TBL
		set CUSTOMER_CODE = #{AccCode}, SA_NUMBER = #{AccountNo}, SA_HOLDER = #{AccountHolder}, SA_AMOUNT = #{DevPrice}
		where SA_CODE = #{savingsCode}
	</insert>
	
	<!-- 예금 가져오기 -->
	<select id="FT_DepositSelect" resultType="com.pj.erp.vo.FT.FT_Savings">
		SELECT
		a.DETAIL_AC_CODE as depositCode, a.account_name as depositName, 
		c.customer_code as accCode, c.customer_name as accName, a.ACCOUNTS_CODE as subjectCode,
		ac.ACCOUNTS_NAME as subjectName, b.ba_number as accountNo, b.ba_holder as accountHolder
		FROM detail_ac_tbl a, bank_account_tbl b, customer_list_tbl c, accounts_tbl ac
		where a.DETAIL_AC_CODE = b.ba_code
		and a.ACCOUNTS_CODE = ac.ACCOUNTS_CODE
		and b.customer_code = c.customer_code
		order by to_number(a.DETAIL_AC_CODE) asc
	</select>
	
	<!-- 예금 key 가져오기 -->
	<select id="FT_DepositKeySelect" resultType="String">
		select ba_code from bank_account_tbl
		where ROWNUM = 1
		ORDER BY to_number(ba_code) desc
	</select>
	
	<!-- 예금 추가 -->
	<insert id="FT_DepositPrevInsert" parameterType = "java.util.Map">
		insert into detail_ac_tbl(ACCOUNTS_CODE, DETAIL_AC_CODE, ACCOUNT_NAME)
		values (#{SubjectCode}, accounts_seq.nextval, #{depositName})
	</insert>
	
	<insert id="FT_DepositInsert" parameterType = "java.util.Map">
		insert into bank_account_tbl(BA_CODE, CUSTOMER_CODE, BA_NUMBER, BA_HOLDER)
		values (accounts_seq.currval, #{AccCode}, #{AccountNo}, #{AccountHolder})
	</insert>
	
	<!-- 예금수정 -->
	<insert id="FT_DepositPrevUpdate" parameterType = "java.util.Map">
		update detail_ac_tbl
		set ACCOUNTS_CODE = #{SubjectCode}, ACCOUNT_NAME = #{depositName}
		where DETAIL_AC_CODE = #{depositCode}
	</insert>
	
	<insert id="FT_DepositUpdate" parameterType = "java.util.Map">
		update bank_account_tbl
		set CUSTOMER_CODE = #{AccCode}, BA_NUMBER = #{AccountNo}, BA_HOLDER = #{AccountHolder}
		where BA_CODE = #{depositCode}
	</insert>
	
	<!-- 거래처 가져오기 -->
	<select id="FT_AccountAllSelect" resultType="com.pj.erp.vo.FT.FT_Account">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
	</select>
	
	<!-- 거래처 개수 가져오기 -->
	<select id="FT_AccountCntSelect" parameterType="String" resultType="int">
		SELECT
	    count(c.customer_code)
	    FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
		and (c.customer_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.customer_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.license_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 거래처 한개 가져오기 -->
	<select id="FT_AccountOneSelect" parameterType="String" resultType="com.pj.erp.vo.FT.FT_Account">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
		and c.customer_code = #{srhval, jdbcType=VARCHAR}
	</select>
	
	<!-- 거래처 가져오기 -->
	<select id="FT_AccountSelect" parameterType="String" resultType="com.pj.erp.vo.FT.FT_Account">
		SELECT
	    c.customer_code, c.license_number, c.customer_name,
	    c.branch_name, c.customer_credit, c.deal_state,
	    b.bs_name, b.bs_master, b.bs_startdate, b.bs_number, b.bs_address,
	    b.bs_address2, b.bs_condition, b.bs_line, b.license_scanfile
		FROM customer_list_tbl c, b_license_tbl b
		where c.license_number = b.license_number
		and (c.customer_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.customer_name like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or c.license_number like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 계정과목 가져오기 -->
	<select id="FT_SubjectAllSelect" resultType="com.pj.erp.vo.FT.FT_Subject">
		select de.detail_ac_code, de.account_name, de.di_table, ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
	</select>
	
	<!-- 계정과목 개수 가져오기 -->
	<select id="FT_SubjectCntSelect" parameterType="String" resultType="int">
		select count(de.detail_ac_code)
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
		and (de.detail_ac_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or de.account_name like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 계정과목 검색한 것 가져오기 -->
	<select id="FT_SubjectSelect" resultType="com.pj.erp.vo.FT.FT_Subject">
		select de.detail_ac_code, de.account_name, de.di_table, ac.accounts_code, ac.accounts_name, a.ag_code, a.ag_name, l.lg_code, l.lg_name
		from ledger_group_tbl l, accounts_group_tbl a, accounts_tbl ac, detail_ac_tbl de
		where l.lg_code = a.lg_code
		and a.ag_code = ac.ag_code2
        and ac.accounts_code = de.accounts_code
		and (de.detail_ac_code like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or de.account_name like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 사원 가져오기 -->
	<select id="FT_UsersAllSelect" resultType="com.pj.erp.vo.HR_VO">
		select * from users
		order by TO_NUMBER(username)
	</select>
	
	<!-- 사원 개수 가져오기 -->
	<select id="FT_UsersCntSelect" parameterType="String" resultType="int">
		select count(username) from users
		where (username like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or e_name like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 사원 검색한 것 가져오기 -->
	<select id="FT_UsersSelect" resultType="com.pj.erp.vo.HR_VO">
		select * from users
		where (username like '%' || #{srhval, jdbcType=VARCHAR} || '%'
		or e_name like '%' || #{srhval, jdbcType=VARCHAR} || '%')
	</select>
	
	<!-- 단기차입금 목록 검색결과 -->
	<select id="getSBorrowList" resultType="com.pj.erp.vo.FT.FT_Short_Borrow_List" parameterType = "java.util.Map">
		select * from shortterm_debt_tbl 
		<if test = "customer_code != null">
			<if test = "username != null">
				where customer_code = '%'||#{customer_code}||'%' and username = '%'||#{username}||'%'
			</if>
			<if test = "username == null">
				where customer_code = '%'||#{customer_code}||'%' 
			</if>
		</if>
		<if test = "customer_code == null">
			<if test = "username != null">
				where username = '%'||#{username}||'%'
			</if>
			<if test = "username == null">
			</if>
		</if>
	</select>
	
	<!-- 장기차입금 목록 검색결과 -->
	<select id="getLBorrowList" resultType="com.pj.erp.vo.FT.FT_Long_Borrow_List" parameterType = "java.util.Map">
		select * from longterm_debt_tbl 
		<if test = "customer_code != null">
			<if test = "username != null">
				where customer_code = '%'||#{customer_code}||'%' and username = '%'||#{username}||'%'
			</if>
			<if test = "username == null">
				where customer_code = '%'||#{customer_code}||'%' 
			</if>
		</if>
		<if test = "customer_code == null">
			<if test = "username != null">
				where username = '%'||#{username}||'%'
			</if>
			<if test = "username == null">
			</if>
		</if>
	</select>
	
	<!-- 지급어음 목록 검색결과 -->
	<select id="getBillPaymentList" resultType="com.pj.erp.vo.FT.FT_Bill_payment_VO" parameterType = "java.util.Map">
		select * from bill_payment_tbl
		<if test = "customer_code != null">
				where customer_code = '%'||#{customer_code}||'%' 
		</if>
		<if test = "customer_code == null">
		</if>
	</select>
	
	<!-- 토지목록 검색결과 -->
	<select id="getLandList" resultType="com.pj.erp.vo.FT.FT_land_list_VO" parameterType = "java.util.Map">
		select * from land_tbl
		<if test = "department_code != null">
			<if test = "land_name != null">
				where department_code = '%'||#{department_code}||'%' and land_name = '%'||#{land_name}||'%'
			</if>
			<if test = "land_name == null">
				where department_code = '%'||#{department_code}||'%' 
			</if>
		</if>
		<if test = "department_code == null">
			<if test = "land_name != null">
				where land_name = '%'||#{land_name}||'%'
			</if>
			<if test = "land_name == null">
			</if>
		</if>
	</select>
	
	<!-- 설비목록 검색결과 -->
	<select id="getFacilityList" resultType="com.pj.erp.vo.FT.FT_facility_list_VO" parameterType = "java.util.Map">
		select * from equipment_tbl
		<if test = "department_code != null">
			<if test = "eq_name != null">
				where department_code = '%'||#{department_code}||'%' and eq_name = '%'||#{eq_name}||'%'
			</if>
			<if test = "eq_name == null">
				where department_code = '%'||#{department_code}||'%' 
			</if>
		</if>
		<if test = "department_code == null">
			<if test = "eq_name != null">
				where eq_name = '%'||#{eq_name}||'%'
			</if>
			<if test = "eq_name == null">
			</if>
		</if>
	</select>
	
	<!-- 분개 데이터 갯수 가져오기 -->
	<select id="FT_chitDistinctCnt" parameterType="java.util.Map" resultType="int">
		select count(journal_number) 
		from journal_record_tbl
		where journal_date between to_date(#{firstday}) and to_date(#{lastday})
		<if test="state == 1">
			and username is null
		</if>
		<if test="state == 2">
			and username is not null
		</if>
	</select>
	
	<!-- 분개 데이터 가져오기 -->
	<select id="FT_ChitDistinct" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_Chit">
		select DISTINCT journal_number, journal_date, username
		from journal_record_tbl
		where journal_date between to_date(#{firstday}) and to_date(#{lastday})
		<if test="state == 1">
			and username is null
		</if>
		<if test="state == 2">
			and username is not null
		</if>
	</select>
	
	<!-- 검색된 모든 분개 갯수 가져오기 -->
	<select id="FT_journalListCnt" parameterType="java.util.Map" resultType="int">
		select count(journal_number) 
		from journal_record_tbl
		where journal_date between to_date(#{firstday}) and to_date(#{lastday})
		<if test="usercode != null">
			and username like '%' || #{usercode} || '%'
		</if>
	</select>
	
	<!-- 검색된 모든 분개 가져오기 -->
	<select id="FT_journalList" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_Chit">
		select j.journal_code, j.journal_number, j.journal_date, de.detail_ac_code, de.account_name,
		c.customer_code, c.customer_name, j.debtor_value, j.creditor_value, j.l_count_value, j.r_count_value, j.journal_abstract,
		j.jr_state, j.last_update, j.last_modi_user, writer.e_name wname, j.username
		from journal_record_tbl j, detail_ac_tbl de, customer_list_tbl c, users writer
		where j.detail_ac_code = de.detail_ac_code
		and j.customer_code = c.customer_code
		and writer.username = j.last_modi_user
		and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
		<if test="usercode != null and usercode != ''">
			and j.last_modi_user like '%' || #{usercode} || '%'
		</if>
		order by 3 asc, 2 asc
	</select>
	
	<!-- 거래처 원장 리스트 갯수 가져오기 -->
	<!-- <select id="FT_journalListCnt" parameterType="java.util.Map" resultType="int">
		<![CDATA[
		select count(c.customer_code)
		from journal_record_tbl j, detail_ac_tbl de, customer_list_tbl c, b_license_tbl b, (select distinct CASE WHEN count(customer_code) = 0 THEN null
        ELSE customer_code END as customer_code, CASE WHEN count(customer_code) = 0 THEN 0
         WHEN (sum(debtor_value)-sum(creditor_value)) <= 0 THEN 0
        ELSE (sum(debtor_value)-sum(creditor_value)) END as debtor_value
		from journal_record_tbl j, detail_ac_tbl de
		where j.detail_ac_code = de.detail_ac_code
		and to_char(j.journal_date,'yyyy-MM') = #{year} || '-' || #{month}
		and de.detail_ac_code = #{scode}
		group by j.customer_code) bval
        where j.customer_code = c.customer_code
        and c.license_number = b.license_number
        and j.detail_ac_code = de.detail_ac_code
        and bval.customer_code(+) = j.customer_code
        and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
        and de.detail_ac_code = #{scode}
        and c.customer_code = #{acode}
        group by c.customer_code
    	]]>
	</select> -->
	
	<!-- 거래처 원장 리스트 가져오기 -->
	<!-- <select id="FT_journalList" parameterType="java.util.Map" resultType="com.pj.erp.vo.FT.FT_Ledger">
	<![CDATA[
		select c.customer_code, c.customer_name, c.license_number, CASE WHEN bval.debtor_value is null THEN 0
        ELSE bval.debtor_value END as before_value, 
		sum(j.debtor_value) debtor_value, sum(j.creditor_value) creditor_value, sum(j.l_count_value) l_count_value, sum(j.r_count_value) r_count_value,
    	c.deal_state, b.bs_master
		from journal_record_tbl j, detail_ac_tbl de, customer_list_tbl c, b_license_tbl b, (select distinct CASE WHEN count(customer_code) = 0 THEN null
        ELSE customer_code END as customer_code, CASE WHEN count(customer_code) = 0 THEN 0
         WHEN (sum(debtor_value)-sum(creditor_value)) <= 0 THEN 0
        ELSE (sum(debtor_value)-sum(creditor_value)) END as debtor_value
		from journal_record_tbl j, detail_ac_tbl de
		where j.detail_ac_code = de.detail_ac_code
		and to_char(j.journal_date,'yyyy-MM') = #{year} || '-' || #{month}
		and de.detail_ac_code = #{scode}
		group by j.customer_code) bval
        where j.customer_code = c.customer_code
        and c.license_number = b.license_number
        and j.detail_ac_code = de.detail_ac_code
        and bval.customer_code(+) = j.customer_code
        and j.journal_date between to_date(#{firstday}) and to_date(#{lastday})
        and de.detail_ac_code = #{scode}
        and c.customer_code = #{acode}
        group by c.customer_code, c.customer_name, c.license_number, bval.debtor_value, c.deal_state, b.bs_master
    	]]>
	</select> -->
	
	<!-- 전표승인처리 -->
	<update id="FT_CheckFormal" parameterType="java.util.Map">
		update journal_record_tbl
		set username = #{username}
		where journal_date = #{dates}
		and journal_number = #{nos}
	</update>
	
</mapper>